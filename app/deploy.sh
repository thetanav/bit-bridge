#!/bin/bash

# BitBridge ICP Canister Deployment Script
# This script builds and deploys the backend and frontend canisters

set -e

echo "🚀 Starting BitBridge deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if dfx is installed
if ! command -v dfx &> /dev/null; then
    print_error "dfx is not installed. Please install the DFINITY SDK first."
    exit 1
fi

# Check if we're in the correct directory
if [ ! -f "dfx.json" ]; then
    print_error "dfx.json not found. Please run this script from the app directory."
    exit 1
fi

# Parse command line arguments
NETWORK="local"
CLEAN=false
GENERATE_BINDINGS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --network)
            NETWORK="$2"
            shift 2
            ;;
        --clean)
            CLEAN=true
            shift
            ;;
        --generate-bindings)
            GENERATE_BINDINGS=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --network NETWORK    Deploy to specific network (local|ic)"
            echo "  --clean             Clean build artifacts before deployment"
            echo "  --generate-bindings Generate TypeScript bindings"
            echo "  -h, --help          Show this help message"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

print_status "Deploying to network: $NETWORK"

# Clean if requested
if [ "$CLEAN" = true ]; then
    print_status "Cleaning build artifacts..."
    dfx stop
    rm -rf .dfx
    rm -rf src/app_backend/target
    rm -rf src/app_frontend/dist
    rm -rf src/app_frontend/assets
fi

# Start dfx if not running (for local network)
if [ "$NETWORK" = "local" ]; then
    print_status "Starting local dfx replica..."
    dfx start --background --clean

    # Wait for replica to be ready
    sleep 5
fi

# Deploy Internet Identity (for local development)
if [ "$NETWORK" = "local" ]; then
    print_status "Deploying Internet Identity canister..."
    dfx deploy internet_identity --network $NETWORK
fi

# Build and deploy backend canister
print_status "Building backend canister..."
cd src/app_backend
cargo build --target wasm32-unknown-unknown --release
cd ../..

print_status "Deploying backend canister..."
dfx deploy app_backend --network $NETWORK

# Get canister IDs
BACKEND_CANISTER_ID=$(dfx canister id app_backend --network $NETWORK)
print_status "Backend canister ID: $BACKEND_CANISTER_ID"

if [ "$NETWORK" = "local" ]; then
    II_CANISTER_ID=$(dfx canister id internet_identity --network $NETWORK)
    print_status "Internet Identity canister ID: $II_CANISTER_ID"
fi

# Update environment variables
print_status "Updating environment variables..."
if [ "$NETWORK" = "local" ]; then
    cat > .env << EOF
# Generated by deploy.sh
DFX_NETWORK=local
CANISTER_ID_APP_BACKEND=$BACKEND_CANISTER_ID
CANISTER_ID_INTERNET_IDENTITY=$II_CANISTER_ID
EOF
else
    cat > .env << EOF
# Generated by deploy.sh
DFX_NETWORK=ic
CANISTER_ID_APP_BACKEND=$BACKEND_CANISTER_ID
CANISTER_ID_INTERNET_IDENTITY=rdmx6-jaaaa-aaaaa-aaadq-cai
EOF
fi

# Update frontend environment variables
print_status "Updating frontend environment variables..."
if [ "$NETWORK" = "local" ]; then
    cat > src/app_frontend/.env << EOF
# Generated by deploy.sh
DFX_NETWORK=local
VITE_DFX_NETWORK=local
VITE_HOST=http://localhost:4943
VITE_IC_HOST=https://ic0.app
VITE_CANISTER_ID_APP_BACKEND=$BACKEND_CANISTER_ID
VITE_CANISTER_ID_INTERNET_IDENTITY=$II_CANISTER_ID
EOF
else
    cat > src/app_frontend/.env << EOF
# Generated by deploy.sh
DFX_NETWORK=ic
VITE_DFX_NETWORK=ic
VITE_HOST=https://ic0.app
VITE_IC_HOST=https://ic0.app
VITE_CANISTER_ID_APP_BACKEND=$BACKEND_CANISTER_ID
VITE_CANISTER_ID_INTERNET_IDENTITY=rdmx6-jaaaa-aaaaa-aaadq-cai
EOF
fi

# Build frontend
print_status "Building frontend..."
cd src/app_frontend
npm install
npm run build
cd ../..

# Deploy frontend canister
print_status "Deploying frontend canister..."
dfx deploy app_frontend --network $NETWORK

# Get frontend canister ID
FRONTEND_CANISTER_ID=$(dfx canister id app_frontend --network $NETWORK)
print_status "Frontend canister ID: $FRONTEND_CANISTER_ID"

# Generate TypeScript bindings if requested
if [ "$GENERATE_BINDINGS" = true ]; then
    print_status "Generating TypeScript bindings..."
    dfx generate app_backend
fi

# Display deployment information
print_status "Deployment completed successfully! 🎉"
echo ""
echo "📋 Deployment Summary:"
echo "======================"
echo "Network: $NETWORK"
echo "Backend Canister ID: $BACKEND_CANISTER_ID"
echo "Frontend Canister ID: $FRONTEND_CANISTER_ID"
if [ "$NETWORK" = "local" ]; then
    echo "Internet Identity Canister ID: $II_CANISTER_ID"
    echo ""
    echo "🌐 Local URLs:"
    echo "Frontend: http://localhost:4943/?canisterId=$FRONTEND_CANISTER_ID"
    echo "Backend Candid UI: http://localhost:4943/?canisterId=$BACKEND_CANISTER_ID&id=$BACKEND_CANISTER_ID"
else
    echo ""
    echo "🌐 IC URLs:"
    echo "Frontend: https://$FRONTEND_CANISTER_ID.ic0.app"
    echo "Backend Candid UI: https://$BACKEND_CANISTER_ID.ic0.app"
fi

echo ""
echo "✅ Your BitBridge application is now ready!"
echo "🔗 Connect with Internet Identity to start using the app."

# Save deployment info to file
cat > deployment-info.json << EOF
{
  "network": "$NETWORK",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "canisters": {
    "app_backend": "$BACKEND_CANISTER_ID",
    "app_frontend": "$FRONTEND_CANISTER_ID"$(if [ "$NETWORK" = "local" ]; then echo ","; echo "    \"internet_identity\": \"$II_CANISTER_ID\""; fi)
  }
}
EOF

print_status "Deployment information saved to deployment-info.json"
